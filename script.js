// v1.5.1 — Hard choices + random order
const $ = (s)=>document.querySelector(s);
const state={caseIndex:0,scores:{empatia:0,conducao:0,agilidade:0},timings:[],verifying:false,timeLeft:0,totalTime:0,timerId:null,answered:false,bonusAgilidade:0};
function addMsg(role,text){const c=$('#chat');const r=document.createElement('div');r.className=`msg ${role}`;const b=document.createElement('div');b.className='bubble';b.textContent=text;r.appendChild(b);c.appendChild(r);c.scrollTop=c.scrollHeight}
const addClient=(t)=>addMsg('client',t),addUser=(t)=>addMsg('user',t),addSystem=(t)=>addMsg('system',t);
function toggleModal(sel,show){const el=$(sel);if(!el)return;if(show){el.classList.remove('hidden')}else{el.classList.add('hidden')}}
function downloadReport(){const last=localStorage.getItem('chatlab:lastScore');const report={title:'Chat Lab — Missão II',when:new Date().toISOString(),result:last?JSON.parse(last):null,version:'1.5.1'};const blob=new Blob([JSON.stringify(report,null,2)],{type:'application/json'});const a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download='chatlab-missao-ii-relatorio.json';a.click();URL.revokeObjectURL(a.href)}
function _norm(s){return (s||'').replace(/\s+/g,' ').trim()}
// scenarios hard
const scenarios=[
  {id:1,message:"Oi! Preciso do documento da proposta. Não sei se vai por e-mail ou WhatsApp. Pode me ajudar?",time:18,goal:["conducao","pergunta_fechada","comunicacao"],options:[
    {text:"Você prefere receber o documento por e-mail ou pelo WhatsApp?",tags:["conducao","pergunta_fechada","comunicacao"],tip:"Oferece duas vias claras e pede a decisão do cliente (fechada)."},
    {text:"Posso te enviar por e-mail ou WhatsApp agora — qual prefere?",tags:["conducao","pergunta_fechada"],tip:"Boa condução; cuidado com promessa de envio imediato antes da confirmação."},
    {text:"Me confirma seu e-mail e WhatsApp para eu já enviar nos dois.",tags:["conducao"],tip:"Coleta dados sem necessidade e foge do pedido de preferência."},
    {text:"Qual é o seu e-mail?",tags:["conducao"],tip:"Objetivo, mas não resolve a dúvida de canal preferido."},]},
  {id:2,message:"Estou bem chateado. Fizeram uma cobrança indevida e ninguém resolve.",time:20,goal:["empatia","comunicacao"],options:[
    {text:"Sinto muito pela situação, entendo o incômodo. Vou te ajudar a resolver da melhor forma, combinado?",tags:["empatia","comunicacao"],tip:"Valida o sentimento e demonstra compromisso, sem prometer o impossível."},
    {text:"Entendo. Para avançarmos, pode me informar o número do contrato?",tags:["empatia","conducao"],tip:"Mostra empatia e direciona o próximo passo."},
    {text:"Calma, vamos ver isso, mas preciso do contrato imediatamente.",tags:["conducao","frio"],tip:"Pressiona e minimiza o sentimento do cliente."},
    {text:"Vamos resolver isso agora!",tags:["comunicacao"],tip:"Transmite energia, mas é promessa arriscada sem checagem."},]},
  {id:3,message:"Eu queria saber sobre a proposta, mas antes: você torce pra qual time?",time:16,goal:["conducao"],options:[
    {text:"Boa! Para avançarmos, preciso confirmar seu CPF. Pode me informar?",tags:["conducao"],tip:"Retoma o foco com cordialidade e orienta o próximo passo."},
    {text:"Sou do [seu time]! E podemos falar da sua proposta depois do seu CPF, tudo bem?",tags:["desvio","conducao"],tip:"Cria vínculo, mas alimenta o desvio antes de retomar."},
    {text:"CPF, por favor.",tags:["frio","conducao"],tip:"Direto demais e sem rapport."},
    {text:"Vamos por partes: qual plano você quer e seu CPF?",tags:["conducao"],tip:"Duas demandas ao mesmo tempo confundem o cliente."},]},
  {id:4,message:"Consegue ver se minha proposta já foi aprovada?",time:15,goal:["conducao"],options:[
    {text:"Estou consultando no sistema, só um instante por favor.",tags:["conducao"],tip:"Sinaliza verificação e ajusta expectativa; use o botão 📎 para pausar o tempo."},
    {text:"Um instante, por favor. Vou verificar e já retorno.",tags:["conducao"],tip:"Boa prática; lembre-se de sinalizar que está verificando."},
    {text:"Calma aí.",tags:["frio"],tip:"Tom impaciente e pouco profissional."},
    {text:"Vejo sim, mas pode demorar bastante.",tags:["comunicacao"],tip:"Transparência é importante, porém exagera no tempo e desalinha a experiência."},]},
  {id:5,message:"Obrigado, deu tudo certo então!",time:12,goal:["finalizacao","empatia"],options:[
    {text:"Que bom! Fico feliz em ajudar. Se precisar, é só chamar. Tenha um ótimo dia!",tags:["finalizacao","empatia"],tip:"Cordial, positiva e deixa porta aberta."},
    {text:"Disponha! Posso apoiar em mais alguma coisa agora?",tags:["finalizacao","comunicacao"],tip:"Boa prática: confirmação de encerramento com oferta de ajuda."},
    {text:"Encerrando atendimento. Bom dia.",tags:["finalizacao"],tip:"Fecha sem calor humano e sem checar necessidades finais."},
    {text:"Tá 👍",tags:["frio"],tip:"Informal demais e pouco profissional."},]},
  {id:6,message:"Qual o prazo para a retirada do CPF da negativação?",time:14,goal:["comunicacao","conducao"],options:[
    {text:"O prazo é de até 5 dias úteis. Mais alguma dúvida?",tags:["comunicacao","conducao","pergunta_fechada"],tip:"Clareza + encaminhamento com decisão fechada."},
    {text:"O prazo padrão é 3 a 5 dias úteis, tudo bem?",tags:["comunicacao"],tip:"Informativo, porém sem condução para o próximo passo."},
    {text:"Depende do pagamento, mas costuma ser rápido.",tags:["comunicacao"],tip:"Vago e sujeito a frustração."},
    {text:"É rápido, quer seguir?",tags:["conducao","pergunta_fechada"],tip:"Conduz, porém sem transparência de prazo."},]},
  {id:7,message:"Tive um problema, posso explicar melhor?",time:18,goal:["empatia","comunicacao"],options:[
    {text:"Claro! Pode me contar o que aconteceu?",tags:["empatia","comunicacao"],tip:"Mostra interesse e guia objetivamente o relato."},
    {text:"Pode mandar um áudio explicando?",tags:["frio"],tip:"Nem sempre é adequado ao canal e dificulta registro."},
    {text:"Resume em duas linhas, por favor.",tags:["desvio"],tip:"Restringe o cliente antes de entender o contexto."},
    {text:"Antes, me informa CPF e protocolo.",tags:["conducao"],tip:"Antecipar dados pode travar o relato inicial."},]},
  {id:8,message:"Tenho urgência para resolver essa pendência. consegue me mandar o boleto ainda hoje?",time:16,goal:["comunicacao","conducao","empatia"],options:[
    {text:"Claro! Prefere por e-mail ou WhatsApp?",tags:["empatia","conducao","pergunta_fechada"],tip:"Valida sentimento e oferece alternativas viáveis."},
    {text:"Ok, sem problemas!",tags:["comunicacao"],tip:"Boa intenção, mas vago e sem alternativa."},
    {text:"Não sei se é possível hoje.",tags:["comunicacao"],tip:"Transparente, mas sem oferecer caminho alternativo."},
    {text:"Consigo fechar para amanhã, pode ser?",tags:["pergunta_fechada"],tip:"Pergunta fechada, porém ignora a urgência do cliente."},]},
];

document.addEventListener('DOMContentLoaded',()=>{ $('#caseTotal').textContent=scenarios.length; bindUI(); applyPrefsFromStorage(); const skip=localStorage.getItem('chatlab:skipIntro')==='1'; if(skip){toggleModal('#modalIntro',false); startGame();} else {toggleModal('#modalIntro',true);} });
function bindUI(){ $('#btnVerify').addEventListener('click', onVerify); $('#btnNext').addEventListener('click', nextCase); $('#prefLargeUI').addEventListener('change', onToggleLargeUI); $('#prefDarkMode').addEventListener('change', onToggleDark); $('#btnTypingClose').addEventListener('click', ()=>toggleModal('#modalTyping',false)); $('#btnTypingStart').addEventListener('click', ()=> startTypingChallenge(window.__seedTypingText||null)); const btnSubmit=document.querySelector('#btnTypingSubmit'); if(btnSubmit){btnSubmit.addEventListener('click', onTypingSubmit);} const btnStart=$('#btnStart'); if(btnStart){ btnStart.addEventListener('click', ()=>{ toggleModal('#modalIntro',false); startGame(); }); } const skipIntro=$('#tgSkipIntro'); if(skipIntro){ skipIntro.addEventListener('change', e=> localStorage.setItem('chatlab:skipIntro', e.target.checked?'1':'0')); skipIntro.checked=localStorage.getItem('chatlab:skipIntro')==='1'; } }
function onToggleLargeUI(e){ document.body.classList.toggle('large-ui',e.target.checked); localStorage.setItem('prefLargeUI', e.target.checked?'1':'0'); }
function onToggleDark(e){ document.body.classList.toggle('dark',e.target.checked); localStorage.setItem('prefDarkMode', e.target.checked?'1':'0'); }
function applyPrefsFromStorage(){ const large=localStorage.getItem('prefLargeUI')==='1'; const dark=localStorage.getItem('prefDarkMode')==='1'; $('#prefLargeUI').checked=large; $('#prefDarkMode').checked=dark; document.body.classList.toggle('large-ui',large); document.body.classList.toggle('dark',dark); }

function startGame(){ state.caseIndex=0; state.scores={empatia:0,conducao:0,agilidade:0}; state.timings=[]; state.bonusAgilidade=Number(localStorage.getItem('typingBonus')||0); $('#scoreEmpatia').textContent=0; $('#scoreConducao').textContent=0; $('#scoreAgilidade').textContent=0; $('#chat').innerHTML=''; $('#options').innerHTML=''; $('#btnNext').disabled=true; $('#caseIndex').textContent=1; addSystem('Bem-vindo(a)! Aplique Empatia, Condução e Agilidade em cada caso. Boa sorte!'); setTimeout(()=> playCase(scenarios[0]),600); }
function playCase(sc){ state.answered=false; $('#options').innerHTML=''; addClient(sc.message); renderOptions(sc); startTimer(sc.time); }
function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]]; } return a; }
function renderOptions(sc){ const box=$('#options'); box.innerHTML=''; const opts=shuffle(sc.options.map(o=>({...o}))); opts.forEach(opt=>{ const btn=document.createElement('button'); btn.className='opt-btn'; btn.innerHTML=`<div>${opt.text}</div>`; btn.addEventListener('click', ()=> onSelectOption(sc,opt)); box.appendChild(btn); }); }

function startTimer(s){ clearInterval(state.timerId); state.totalTime=s; state.timeLeft=s; updateTimerUI(); state.timerId=setInterval(()=>{ if(!state.verifying){ state.timeLeft-=0.1; if(state.timeLeft<=0){ state.timeLeft=0; clearInterval(state.timerId); if(!state.answered){ addSystem('⏱️ Tempo esgotado. Tente responder com mais agilidade!'); $('#btnNext').disabled=false; state.timings.push(state.totalTime); } } updateTimerUI(); } },100); }
function updateTimerUI(){ const pct=Math.max(0,Math.min(1,state.timeLeft/state.totalTime)); $('#timeBar').style.width=`${pct*100}%`; $('#timeLabel').textContent=`${Math.ceil(state.timeLeft)}s`; }
function onVerify(){ if(state.verifying||state.answered) return; state.verifying=true; addUser('Estou consultando no sistema, só um instante por favor.'); addSystem('✅ Verificação sinalizada. Tempo pausado por 5s.'); setTimeout(()=>{ state.verifying=false; },5000); }
function scoreChoice(sc,opt,timeSpent){ const want=new Set(sc.goal); const has=new Set(opt.tags); let emp=0,con=0,agi=0; if(has.has('empatia')) emp+=10; if(has.has('frio')) emp-=6; if(has.has('conducao')) con+=10; if(has.has('pergunta_fechada')) con+=6; if(has.has('comunicacao')) con+=4; if(has.has('desvio')) con-=6; if([...has].some(t=> want.has(t))){ emp+=2; con+=2; } const maxAgi=10; const pctTempo=Math.max(0,1-(timeSpent/Math.max(1,state.totalTime))); agi+=Math.round(maxAgi*pctTempo); return {empatia:Math.max(-10,emp),conducao:Math.max(-10,con),agilidade:Math.max(0,agi)} }
function onSelectOption(sc,opt){ if(state.answered) return; state.answered=true; const text=opt.text; addUser(text); openTypingWithText(text); const tGasto=Math.max(0,state.totalTime-state.timeLeft); const pts=scoreChoice(sc,opt,tGasto); state.scores.empatia+=pts.empatia; state.scores.conducao+=pts.conducao; state.scores.agilidade+=pts.agilidade; $('#scoreEmpatia').textContent=state.scores.empatia; $('#scoreConducao').textContent=state.scores.conducao; $('#scoreAgilidade').textContent=state.scores.agilidade; addSystem(`💡 ${opt.tip}`); addSystem(`📊 (+${pts.empatia} Empatia, +${pts.conducao} Condução, +${pts.agilidade} Agilidade)`); clearInterval(state.timerId); state.timings.push(tGasto); $('#btnNext').disabled=false; }
function nextCase(){ $('#btnNext').disabled=true; state.caseIndex++; $('#caseIndex').textContent=state.caseIndex+1; if(state.caseIndex>=scenarios.length){ endGame(); return; } playCase(scenarios[state.caseIndex]); }
function endGame(){ if(state.bonusAgilidade>0){ state.scores.agilidade+=state.bonusAgilidade; addSystem(`⚡ Bônus de agilidade aplicado: +${state.bonusAgilidade}`);} const avg= state.timings.length?(state.timings.reduce((a,b)=>a+b,0)/state.timings.length):0; $('#resEmpatia').textContent=state.scores.empatia; $('#resConducao').textContent=state.scores.conducao; $('#resAgilidade').textContent=state.scores.agilidade; $('#resTempoMedio').textContent=`${avg.toFixed(1)}s`; $('#medals').innerHTML=renderMedals(state.scores); const snapshot={when:new Date().toISOString(),scores:state.scores,avgTime:Number(avg.toFixed(2)),cases:scenarios.length}; localStorage.setItem('chatlab:lastScore', JSON.stringify(snapshot)); toggleModal('#modalResult',true); }
function renderMedals(sc){ const medals=[]; const mEmp=sc.empatia>=40?'🥇':sc.empatia>=28?'🥈':sc.empatia>=16?'🥉':'🎗️'; const mCon=sc.conducao>=40?'🥇':sc.conducao>=28?'🥈':sc.conducao>=16?'🥉':'🎗️'; const mAgi=sc.agilidade>=45?'🥇':sc.agilidade>=30?'🥈':sc.agilidade>=18?'🥉':'🎗️'; medals.push(`<span class="medal" title="Empatia">${mEmp}</span>`); medals.push(`<span class="medal" title="Condução">${mCon}</span>`); medals.push(`<span class="medal" title="Agilidade">${mAgi}</span>`); const total=sc.empatia+sc.conducao+sc.agilidade; const crown= total>=120?'👑 Excelente': total>=90?'🏆 Muito bom': total>=60?'🎖️ Bom':'🎗️ Aprendizado'; medals.push(`<span class="medal badge" title="Pontuação total">${crown}</span>`); return medals.join(''); }

// typing mini-game
const typingTextPool=[
  'No atendimento digital, a empatia aparece na linguagem e no tom. Valide o sentimento do cliente e conduza a conversa com clareza.',
  'Use perguntas fechadas para facilitar decisões. Sinalize quando estiver verificando algo e finalize com cordialidade.',
  'Agilidade importa: responda com rapidez, mas sem perder a qualidade. Mantenha foco e objetividade ao longo da conversa.',
];
let typingState={active:false,timeLeft:30,text:'',timerId:null,typed:'',wpm:0,acc:0};
function openTypingWithText(text){ toggleModal('#modalTyping',true); $('#typingText').textContent=text||''; $('#typingInput').value=''; $('#typingInput').disabled=true; $('#typingBar').style.width='100%'; $('#typingTime').textContent='30s'; $('#typingWPM').textContent='0'; $('#typingACC').textContent='0%'; window.__seedTypingText=text||''; const btnSubmit2=document.querySelector('#btnTypingSubmit'); if(btnSubmit2) btnSubmit2.disabled=true; }
function startTypingChallenge(seedText){ if(typingState.active) return; typingState.active=true; const btnSubmit3=document.querySelector('#btnTypingSubmit'); if(btnSubmit3) btnSubmit3.disabled=true; typingState.timeLeft=30; typingState.text= seedText && seedText.trim()? seedText: typingTextPool[Math.floor(Math.random()*typingTextPool.length)]; typingState.typed=''; $('#typingText').textContent=typingState.text; $('#typingInput').value=''; $('#typingInput').disabled=false; $('#typingInput').focus(); $('#typingBar').style.width='100%'; $('#typingTime').textContent='30s'; $('#typingWPM').textContent='0'; $('#typingACC').textContent='0%'; clearInterval(typingState.timerId); typingState.timerId=setInterval(()=>{ typingState.timeLeft-=1; if(typingState.timeLeft<=0){ typingState.timeLeft=0; clearInterval(typingState.timerId); finishTypingChallenge(); } $('#typingBar').style.width=`${(typingState.timeLeft/30)*100}%`; $('#typingTime').textContent=`${typingState.timeLeft}s`; },1000); $('#typingInput').addEventListener('input', onTypingInput); }
function onTypingInput(e){ typingState.typed=e.target.value; const chars=typingState.typed.length; const minutes=(30-typingState.timeLeft)/60; const wpm=minutes>0? Math.round((chars/5)/minutes):0; const acc=accuracy(typingState.typed,typingState.text); typingState.wpm=wpm; typingState.acc=acc; $('#typingWPM').textContent=String(wpm); $('#typingACC').textContent=`${acc}%`; const btnSubmit=document.querySelector('#btnTypingSubmit'); if(btnSubmit){ btnSubmit.disabled = _norm(typingState.typed) !== _norm(typingState.text); } }
function accuracy(a,b){ const len=Math.max(a.length,b.length); if(len===0) return 100; let correct=0; for(let i=0;i<Math.min(a.length,b.length);i++){ if(a[i]===b[i]) correct++; } const acc=Math.round((correct/len)*100); return Math.max(0,Math.min(100,acc)); }
function finishTypingChallenge(){ const btnSubmit=document.querySelector('#btnTypingSubmit'); if(btnSubmit) btnSubmit.disabled=false; $('#typingInput').disabled=true; typingState.active=false; const w=typingState.wpm; const acc=typingState.acc; const bonus=Math.min(20, Math.round((w*(acc/100))/2)); localStorage.setItem('typingBonus', String(bonus)); $('#typingWPM').textContent=String(w); $('#typingACC').textContent=`${acc}%`; const msg= bonus>0? `⚡ Desafio concluído! Bônus de agilidade: +${bonus} pts (aplicado ao final da missão).`: `Desafio concluído! Sem bônus desta vez.`; addSystem(msg); }
function onTypingSubmit(){ if(typingState.active){ clearInterval(typingState.timerId); finishTypingChallenge(); } addSystem('✅ Resposta enviada. O bônus de agilidade será considerado no resultado final.'); toggleModal('#modalTyping', false); }
setTimeout(()=>{ document.body.classList.add('ready'); },400);
